import {
  DataTable,
  DataTablePageEvent,
  DataTableRowClickEvent,
  DataTableSelectionSingleChangeEvent,
  DataTableValue,
} from "primereact/datatable";
import { Column } from "primereact/column";
import React from "react";

interface TableColumn<T> {
  field?: keyof T;
  header: string;
  alignHeader?: "left" | "center" | "right";
  className?: string;
  headerClassName?:string;
  body?: (rowData: T) => React.ReactNode;
}

interface CommonDataTableProps<T> {
  value: DataTableValue[];
  totalRecords: number;
  isLoading: boolean;
  first: number;
  rows: number;
  onPageChange: (event: DataTablePageEvent) => void;
  onSelectionChange?: (
    event: DataTableSelectionSingleChangeEvent<DataTableValue[]>
  ) => void;
  columns?: TableColumn<T>[];
  emptyMessage?: string;

  onRowClick?: (event: DataTableRowClickEvent) => void;
  rowHover?: boolean;
  stripedRows?: boolean;
  resizableColumns?: boolean;
  rowsPerPageOptions?: number[];
  wrapperClassName?: string;
  dataKey: string;
  tableClassName?: string;
}

const CommonDataTable = <T,>({
  value,
  totalRecords,
  isLoading = false,
  first,
  rows,
  onSelectionChange,
  onRowClick,
  onPageChange,
  columns,
  emptyMessage = "No data found.",
  rowHover = true,
  stripedRows = true,
  resizableColumns = true,
  rowsPerPageOptions = [10, 20, 50],
  wrapperClassName = "cs-table-wrapper",
  dataKey,
  tableClassName = "cs-table",
}: CommonDataTableProps<T>) => {
  const autoGeneratedColumns: TableColumn<T>[] =
    columns && columns.length > 0
      ? columns
      : value.length > 0
      ? (Object.keys(value[0]) as (keyof T)[]).map((key) => ({
          field: key,
          header: key.toString().toUpperCase(),
        }))
      : [];
  return (
    <DataTable
      dataKey={dataKey}
      value={value}
      paginator
      first={first}
      rows={rows}
      rowsPerPageOptions={rowsPerPageOptions}
      totalRecords={totalRecords}
      loading={isLoading}
      lazy
      emptyMessage={emptyMessage}
      className={`${wrapperClassName}`}
      tableClassName={tableClassName}
      paginatorClassName="cs-paginator"
      onPage={onPageChange}
      onSelectionChange={onSelectionChange}
      onRowClick={onRowClick}
      rowHover={rowHover}
      stripedRows={stripedRows}
      resizableColumns={resizableColumns}
    >
      {autoGeneratedColumns.map((col, index) => (
        <Column
          key={String(col.field) || index}
          field={col.field as string}
          header={col.header}
          headerClassName={`cs-header ${index === 0 ? "cs-header-first" : ""} ${
            index === autoGeneratedColumns.length - 1 ? "cs-header-last" : ""
          }`}
          className={`cs-cell ${col.className || ""}`}
          alignHeader={col.alignHeader || "center"}
          body={col.body ? (rowData: T) => col.body!(rowData) : undefined}
        />
      ))}
    </DataTable>
  );
};

export default CommonDataTable;
